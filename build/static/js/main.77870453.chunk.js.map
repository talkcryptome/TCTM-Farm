{"version":3,"sources":["utils/web3.ts","config/constants/vaults.ts","state/vaults/index.ts","state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","state/actions.ts","hooks/useRefresh.ts","config/constants/types.ts","utils/multicall.ts","state/hooks.ts","contexts/Localisation/translationsContext.ts","components/layout/Container.tsx","components/layout/Page.tsx","utils/addressHelpers.ts","config/constants/pools.ts","config/constants/contracts.ts","config/constants/farms.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx"],"names":["RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","getWeb3","getContract","abi","address","contractOptions","eth","Contract","vaults","risk","lpSymbol","lpAddresses","depositFeeBP","tokenSymbol","tokenAddresses","quoteTokenSymbol","QuoteToken","BUSD","quoteTokenAdresses","contracts","busd","map","vault","index","pid","initialState","data","vaultsConfig","VaultsSlice","createSlice","name","reducers","setVaultsPublicData","state","action","liveVaultsData","payload","liveVaultData","find","f","setVaultUserData","arrayOfUserDataObjects","forEach","userDataEl","userData","actions","fetchFarms","a","Promise","all","farmsConfig","farmConfig","lpAdress","CHAIN_ID","calls","params","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","div","pow","tokenPriceVsQuote","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","info","totalAllocPoint","TCTMPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","reject","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","farmsSlice","setFarmsPublicData","liveFarmsData","liveFarmData","setFarmUserData","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","nodes","process","getNodeUrl","randomIndex","random","length","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","useEffect","interval","setInterval","prev","clearInterval","Provider","value","useRefresh","useContext","fastRefresh","slowRefresh","PoolCategory","web3","multi","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","i","decodeFunctionResult","ZERO","useFetchPublicData","useDispatch","useFarms","useSelector","useFarmFromPid","useFarmUser","useVaults","usePriceBnbBusd","usePriceCakeBusd","useTotalValue","bnbPrice","cakePrice","val","BNB","CAKE","plus","defaultTranslationState","translations","setTranslations","TranslationsContext","Container","styled","theme","mediaQueries","sm","Page","lg","getCakeAddress","addresses","cake","chainId","masterChef","mulltiCall","getWbnbAddress","wbnb","pools","sousId","tokenName","stakingTokenName","stakingTokenAddress","contractAddress","poolCategory","CORE","projectLink","harvest","tokenPerBlock","sortOrder","isFinished","SYRUP","usdc","usdt","TCTM_MAINNET","nonBnbPools","poolsConfig","filter","p","bnbPools","nonMasterPools","masterChefContract","masterChefABI","fetchPoolsAllowance","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","fetchUserPendingRewards","pendingRewards","pendingTCTM","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","storedLangCode","localStorage","getItem","storedLang","getStoredLang","fetch","then","r","json","translationApiResponse","catch","e","console","error","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","useTheme","StyledThemeCopntext","config","label","icon","href","items","Menu","props","useWallet","connect","reset","login","logout","currentLang","langs","setLang","links","Wrapper","PageLoader","Home","lazy","Farms","Vaults","Bridges","Aggregators","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","fallback","path","exact","tokenMode","component","memo","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","getBlockNumber","blockNumber","current","configureStore","devTools","reducer","farmsReducer","poolsReducer","vaultsReducer","Providers","rpcUrl","parseInt","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77870453.chunk.js","sourcesContent":["import Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using our own private provider httpProver\r\n */\r\nconst getWeb3 = () => {\r\n  const web3 = new Web3(httpProvider)\r\n  return web3\r\n}\r\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = getWeb3()\r\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\r\n}\r\n\r\nexport { getWeb3, getContract, httpProvider }\r\n","import contracts from './contracts'\r\nimport { VaultConfig, QuoteToken } from './types'\r\n\r\nconst TCTM_BUSD_LP_MAINNET = `0xc3bdff1fa4985b9977dddf2ea2b98c75dd4ec65c`\r\n// const TCTM_BNB_LP_MAINNET = `0xc3bdff1fa4985b9977dddf2ea2b98c75dd4ec65c`\r\nconst TCTM_MAINNET = `0xBCFeDe73a76E2294B82d28c2737F9eECdf0342eB`\r\n\r\nconst vaults: VaultConfig[] = [\r\n  {\r\n    risk: 1,\r\n    lpSymbol: 'TCTM-BUSD LP2',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: TCTM_BUSD_LP_MAINNET,\r\n    },\r\n    depositFeeBP: '0%',\r\n    tokenSymbol: 'TCTM',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: TCTM_MAINNET,\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 3,\r\n    lpSymbol: 'BNB-BUSD LP',\r\n    lpAddresses: {\r\n      97: '0x01b1405bEF38652468C9f43861010eB73E0AA443',\r\n      56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f',\r\n    },\r\n    tokenSymbol: 'BNB',\r\n    tokenAddresses: {\r\n      97: '0xae13d989dac2f0debff460ac112a837c89baa7cd',\r\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n    depositFeeBP: '1%',\r\n  }, \r\n\r\n].map((vault, index) => ({ ...vault, pid: index }))\r\n\r\nexport default vaults\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport vaultsConfig from 'config/constants/vaults'\r\nimport fetchVaults from './fetchVaults'\r\nimport {\r\n  fetchVaultUserEarnings,\r\n  fetchVaultUserAllowances,\r\n  fetchVaultUserTokenBalances,\r\n  fetchVaultUserStakedBalances,\r\n} from './fetchVaultUser'\r\nimport { VaultsState, Vault } from '../types'\r\n\r\nconst initialState: VaultsState = { data: [...vaultsConfig] }\r\n\r\nexport const VaultsSlice = createSlice({\r\n  name: 'Vaultss',\r\n  initialState,\r\n  reducers: {\r\n    setVaultsPublicData: (state, action) => {\r\n      const liveVaultsData: Vault[] = action.payload\r\n      state.data = state.data.map((vault) => {\r\n        const liveVaultData = liveVaultsData.find((f) => f.pid === vault.pid)\r\n        return { ...vault, ...liveVaultData }\r\n      })\r\n    },\r\n    setVaultUserData: (state, action) => {\r\n      const { arrayOfUserDataObjects } = action.payload\r\n      arrayOfUserDataObjects.forEach((userDataEl) => {\r\n        const { index } = userDataEl\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setVaultsPublicData, setVaultUserData } = VaultsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchVaultsPublicDataAsync = () => async (dispatch) => {\r\n  const vaults = await fetchVaults()\r\n  dispatch(setVaultsPublicData(vaults))\r\n}\r\nexport const fetchVaultUserDataAsync = (account) => async (dispatch) => {\r\n  const userVaultAllowances = await fetchVaultUserAllowances(account)\r\n  const userVaultTokenBalances = await fetchVaultUserTokenBalances(account)\r\n  const userStakedBalances = await fetchVaultUserStakedBalances(account)\r\n  const userVaultEarnings = await fetchVaultUserEarnings(account)\r\n\r\n  const arrayOfUserDataObjects = userVaultAllowances.map((vaultAllowance, index) => {\r\n    return {\r\n      index,\r\n      allowance: userVaultAllowances[index],\r\n      tokenBalance: userVaultTokenBalances[index],\r\n      stakedBalance: userStakedBalances[index],\r\n      earnings: userVaultEarnings[index],\r\n    }\r\n  })\r\n\r\n  dispatch(setVaultUserData({ arrayOfUserDataObjects }))\r\n}\r\n\r\nexport default VaultsSlice.reducer\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { QuoteToken } from '../../config/constants/types'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nconst fetchFarms = async () => {\r\n  const data = await Promise.all(\r\n    farmsConfig.map(async (farmConfig) => {\r\n      try {\r\n        const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\r\n        const calls = [\r\n          // Balance of token in the LP contract\r\n          {\r\n            address: farmConfig.tokenAddresses[CHAIN_ID],\r\n            name: 'balanceOf',\r\n            params: [lpAdress],\r\n          },\r\n          // Balance of quote token on LP contract\r\n          {\r\n            address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n            name: 'balanceOf',\r\n            params: [lpAdress],\r\n          },\r\n          // Balance of LP tokens in the master chef contract\r\n          {\r\n            address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\r\n            name: 'balanceOf',\r\n            params: [getMasterChefAddress()],\r\n          },\r\n          // Total supply of LP tokens\r\n          {\r\n            address: lpAdress,\r\n            name: 'totalSupply',\r\n          },\r\n          // Token decimals\r\n          {\r\n            address: farmConfig.tokenAddresses[CHAIN_ID],\r\n            name: 'decimals',\r\n          },\r\n          // Quote token decimals\r\n          {\r\n            address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n            name: 'decimals',\r\n          },\r\n        ]\r\n\r\n        const [\r\n          tokenBalanceLP,\r\n          quoteTokenBlanceLP,\r\n          lpTokenBalanceMC,\r\n          lpTotalSupply,\r\n          tokenDecimals,\r\n          quoteTokenDecimals,\r\n        ] = await multicall(erc20, calls)\r\n\r\n        let tokenAmount\r\n        let lpTotalInQuoteToken\r\n        let tokenPriceVsQuote\r\n        if (farmConfig.isTokenOnly) {\r\n          tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals))\r\n          if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\r\n            tokenPriceVsQuote = new BigNumber(1)\r\n          } else {\r\n            tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\r\n          }\r\n          lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\r\n        } else {\r\n          // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n          const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n          // Total value in staking in quote token value\r\n          lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\r\n            .div(new BigNumber(10).pow(18))\r\n            .times(new BigNumber(2))\r\n            .times(lpTokenRatio)\r\n\r\n          // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n          tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n          const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\r\n            .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n            .times(lpTokenRatio)\r\n\r\n          if (tokenAmount.comparedTo(0) > 0) {\r\n            tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount)\r\n          } else {\r\n            tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\r\n          }\r\n        }\r\n\r\n        const [info, totalAllocPoint, TCTMPerBlock] = await multicall(masterchefABI, [\r\n          {\r\n            address: getMasterChefAddress(),\r\n            name: 'poolInfo',\r\n            params: [farmConfig.pid],\r\n          },\r\n          {\r\n            address: getMasterChefAddress(),\r\n            name: 'totalAllocPoint',\r\n          },\r\n          {\r\n            address: getMasterChefAddress(),\r\n            name: 'TCTMPerBlock',\r\n          },\r\n        ])\r\n\r\n        const allocPoint = new BigNumber(info.allocPoint._hex)\r\n        const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n\r\n        return {\r\n          ...farmConfig,\r\n          tokenAmount: tokenAmount.toJSON(),\r\n          // quoteTokenAmount: quoteTokenAmount,\r\n          lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n          tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n          poolWeight: poolWeight.toNumber(),\r\n          multiplier: `${allocPoint.div(100).toString()}X`,\r\n          depositFeeBP: info.depositFeeBP,\r\n          TCTMPerBlock: new BigNumber(TCTMPerBlock).toNumber(),\r\n        }\r\n      } catch (ex) {\r\n        /* console.log('ERROR')\r\n        console.log(farmConfig.lpSymbol)\r\n        console.log(ex) */\r\n        return Promise.reject()\r\n      }\r\n    }),\r\n  )\r\n\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchFarmUserAllowances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\r\n  })\r\n\r\n  const rawLpAllowances = await multicall(erc20ABI, calls)\r\n\r\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n    return new BigNumber(lpBalance).toJSON()\r\n  })\r\n  return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string) => {\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawTokenBalances = await multicall(erc20ABI, calls)\r\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n    return new BigNumber(tokenBalance).toJSON()\r\n  })\r\n  return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'userInfo',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawStakedBalances = await multicall(masterchefABI, calls)\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'pendingTCTM',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawEarnings = await multicall(masterchefABI, calls)\r\n  const parsedEarnings = rawEarnings.map((earnings) => {\r\n    return new BigNumber(earnings).toJSON()\r\n  })\r\n  return parsedEarnings\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport fetchFarms from './fetchFarms'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst initialState: FarmsState = { data: [...farmsConfig] }\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {\r\n    setFarmsPublicData: (state, action) => {\r\n      const liveFarmsData: Farm[] = action.payload\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    },\r\n    setFarmUserData: (state, action) => {\r\n      const { arrayOfUserDataObjects } = action.payload\r\n      arrayOfUserDataObjects.forEach((userDataEl) => {\r\n        const { index } = userDataEl\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\r\n  const farms = await fetchFarms()\r\n  dispatch(setFarmsPublicData(farms))\r\n}\r\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\r\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\r\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\r\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\r\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\r\n\r\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\r\n    return {\r\n      index,\r\n      allowance: userFarmAllowances[index],\r\n      tokenBalance: userFarmTokenBalances[index],\r\n      stakedBalance: userStakedBalances[index],\r\n      earnings: userFarmEarnings[index],\r\n    }\r\n  })\r\n\r\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\r\n}\r\n\r\nexport default farmsSlice.reducer\r\n","import random from 'lodash/random'\r\n\r\n// Array of available nodes to connect to\r\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\r\n\r\nconst getNodeUrl = () => {\r\n  const randomIndex = random(0, nodes.length - 1)\r\n  return nodes[randomIndex]\r\n}\r\n\r\nexport default getNodeUrl\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nconst RefreshContextProvider = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setFast((prev) => prev + 1)\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setSlow((prev) => prev + 1)\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\nexport { RefreshContext, RefreshContextProvider }\r\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\r\nexport { fetchVaultsPublicDataAsync, fetchVaultUserDataAsync } from './vaults'\r\nexport {\r\n  fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  updateUserAllowance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n  updateUserStakedBalance,\r\n} from './pools'\r\n","import { useContext } from 'react'\r\nimport { RefreshContext } from 'contexts/RefreshContext'\r\n\r\nconst useRefresh = () => {\r\n  const { fast, slow } = useContext(RefreshContext)\r\n  return { fastRefresh: fast, slowRefresh: slow }\r\n}\r\n\r\nexport default useRefresh\r\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\r\n\r\nexport interface Ifo {\r\n  id: string\r\n  isActive: boolean\r\n  address: string\r\n  name: string\r\n  subTitle?: string\r\n  description?: string\r\n  launchDate: string\r\n  launchTime: string\r\n  saleAmount: string\r\n  raiseAmount: string\r\n  cakeToBurn: string\r\n  projectSiteUrl: string\r\n  currency: string\r\n  currencyAddress: string\r\n  tokenDecimals: number\r\n  releaseBlockNumber: number\r\n}\r\n\r\nexport enum QuoteToken {\r\n  'BNB' = 'BNB',\r\n  'CAKE' = 'CAKE',\r\n  'SYRUP' = 'SYRUP',\r\n  'BUSD' = 'BUSD',\r\n  'TWT' = 'TWT',\r\n  'UST' = 'UST',\r\n  'USDC' = 'USDC',\r\n  'USDT' = 'USDT',\r\n}\r\n\r\nexport enum PoolCategory {\r\n  'COMMUNITY' = 'Community',\r\n  'CORE' = 'Core',\r\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\r\n}\r\n\r\nexport interface Address {\r\n  97?: string\r\n  56: string\r\n}\r\n\r\nexport interface FarmConfig {\r\n  pid: number\r\n  lpSymbol: string\r\n  lpAddresses: Address\r\n  tokenSymbol: string\r\n  tokenAddresses: Address\r\n  quoteTokenSymbol: QuoteToken\r\n  quoteTokenAdresses: Address\r\n  multiplier?: string\r\n  isTokenOnly?: boolean\r\n  isCommunity?: boolean\r\n  risk: number\r\n  dual?: {\r\n    rewardPerBlock: number\r\n    earnLabel: string\r\n    endBlock: number\r\n  }\r\n}\r\n\r\nexport interface PoolConfig {\r\n  sousId: number\r\n  image?: string\r\n  tokenName: string\r\n  stakingTokenName: QuoteToken\r\n  stakingLimit?: number\r\n  stakingTokenAddress?: string\r\n  contractAddress: Address\r\n  poolCategory: PoolCategory\r\n  projectLink: string\r\n  tokenPerBlock: string\r\n  sortOrder?: number\r\n  harvest?: boolean\r\n  isFinished?: boolean\r\n  tokenDecimals: number\r\n}\r\n\r\nexport interface VaultConfig {\r\n  pid: number\r\n  lpSymbol: string\r\n  lpAddresses: Address\r\n  tokenSymbol: string\r\n  tokenAddresses: Address\r\n  quoteTokenSymbol: QuoteToken\r\n  quoteTokenAdresses: Address\r\n  multiplier?: string\r\n  isTokenOnly?: boolean\r\n  isCommunity?: boolean\r\n  risk: number\r\n  dual?: {\r\n    rewardPerBlock: number\r\n    earnLabel: string\r\n    endBlock: number\r\n  }\r\n}\r\n\r\nexport type Nft = {\r\n  name: string\r\n  description: string\r\n  originalImage: string\r\n  previewImage: string\r\n  blurImage: string\r\n  sortOrder: number\r\n  bunnyId: number\r\n}\r\n","import { AbiItem } from 'web3-utils'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport { getMulticallAddress } from 'utils/addressHelpers'\r\n\r\ninterface Call {\r\n  address: string // Address of the contract\r\n  name: string // Function name on the contract (exemple: balanceOf)\r\n  params?: any[] // Function params\r\n}\r\n\r\nconst multicall = async (abi: any[], calls: Call[]) => {\r\n  const web3 = getWeb3()\r\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n\r\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n  const { returnData } = await multi.methods.aggregate(calldata).call()\r\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\r\n\r\n  return res\r\n}\r\n\r\nexport default multicall\r\n","import BigNumber from 'bignumber.js'\r\nimport { useEffect, /* useMemo */ } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmsPublicDataAsync, /* fetchPoolsPublicDataAsync, */ fetchPoolsUserDataAsync } from './actions'\r\nimport { State, Farm, Pool, Vault } from './types'\r\nimport { QuoteToken } from '../config/constants/types'\r\n\r\nconst ZERO = new BigNumber(0)\r\n\r\nexport const useFetchPublicData = () => {\r\n  const dispatch = useDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync())\r\n    // dispatch(fetchPoolsPublicDataAsync())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\n// Farms\r\n\r\nexport const useFarms = (): Farm[] => {\r\n  const farms = useSelector((state: State) => state.farms.data)\r\n  return farms\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\r\n  }\r\n}\r\n\r\n// Pools\r\n\r\nexport const usePools = (account): Pool[] => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n  return pools\r\n}\r\n\r\nexport const usePoolFromPid = (sousId): Pool => {\r\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\r\n  return pool\r\n}\r\n\r\n// Vaults\r\n\r\nexport const useVaults = (): Vault[] => {\r\n  const vaults = useSelector((state: State) => state.vaults.data)\r\n  return vaults\r\n}\r\n\r\nexport const useVaultFromPid = (pid): Vault => {\r\n  const vault = useSelector((state: State) => state.vaults.data.find((f) => f.pid === pid))\r\n  return vault\r\n}\r\n\r\nexport const useVaultFromSymbol = (lpSymbol: string): Vault => {\r\n  const vault = useSelector((state: State) => state.vaults.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return vault\r\n}\r\n\r\nexport const useVaultUser = (pid) => {\r\n  const vault = useVaultFromPid(pid)\r\n\r\n  return {\r\n    allowance: vault.userData ? new BigNumber(vault.userData.allowance) : new BigNumber(0),\r\n    tokenBalance: vault.userData ? new BigNumber(vault.userData.tokenBalance) : new BigNumber(0),\r\n    stakedBalance: vault.userData ? new BigNumber(vault.userData.stakedBalance) : new BigNumber(0),\r\n    earnings: vault.userData ? new BigNumber(vault.userData.earnings) : new BigNumber(0),\r\n  }\r\n}\r\n\r\n\r\n\r\n// Prices\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n  const pid = 2 // BUSD-BNB LP //TODO: SET BACK to 2!!\r\n  const farm = useFarmFromPid(pid)\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n  const pid = 1 // TCTM-BUSD LP\r\n  const farm = useFarmFromPid(pid)\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const useTotalValue = (): BigNumber => {\r\n  const farms = useFarms()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const cakePrice = usePriceCakeBusd()\r\n  let value = new BigNumber(0)\r\n  for (let i = 0; i < farms.length; i++) {\r\n    const farm = farms[i]\r\n    if (farm.lpTotalInQuoteToken) {\r\n      let val\r\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n        val = bnbPrice.times(farm.lpTotalInQuoteToken)\r\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n        val = cakePrice.times(farm.lpTotalInQuoteToken)\r\n      } else {\r\n        val = farm.lpTotalInQuoteToken\r\n      }\r\n      value = value.plus(val)\r\n    }\r\n  }\r\n  return value\r\n}\r\n","import React, { createContext } from 'react'\r\n\r\nexport interface TranslationState {\r\n  translations: Array<any>\r\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\r\n}\r\n\r\nconst defaultTranslationState: TranslationState = {\r\n  translations: [],\r\n  setTranslations: (): void => undefined,\r\n}\r\n\r\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 992px;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n  }\r\n`\r\n\r\nexport default Container\r\n","import styled from 'styled-components'\r\nimport Container from './Container'\r\n\r\nconst Page = styled(Container)`\r\n  min-height: calc(100vh - 64px);\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-top: 24px;\r\n    padding-bottom: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-top: 32px;\r\n    padding-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default Page\r\n","import addresses from 'config/constants/contracts'\r\n\r\nconst chainId = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const getCakeAddress = () => {\r\n  return addresses.cake[chainId]\r\n}\r\nexport const getMasterChefAddress = () => {\r\n  return addresses.masterChef[chainId]\r\n}\r\nexport const getMulticallAddress = () => {\r\n  return addresses.mulltiCall[chainId]\r\n}\r\nexport const getWbnbAddress = () => {\r\n  return addresses.wbnb[chainId]\r\n}\r\n\r\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\r\n\r\nconst pools: PoolConfig[] = [\r\n  {\r\n    sousId: 0,\r\n    tokenName: 'CAKE',\r\n    stakingTokenName: QuoteToken.CAKE,\r\n    stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n    contractAddress: {\r\n      97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n      56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    projectLink: 'https://pancakeswap.finance/',\r\n    harvest: true,\r\n    tokenPerBlock: '10',\r\n    sortOrder: 1,\r\n    isFinished: false,\r\n    tokenDecimals: 18,\r\n  },\r\n  {\r\n    sousId: 1,\r\n    tokenName: 'TWT',\r\n    stakingTokenName: QuoteToken.SYRUP,\r\n    stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\r\n    contractAddress: {\r\n      97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n      56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    projectLink: 'https://trustwallet.com/',\r\n    harvest: true,\r\n    tokenPerBlock: '20',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n    tokenDecimals: 18,\r\n  },\r\n]\r\n\r\nexport default pools\r\n","export default {\r\n  cake: {\r\n    56: '0xBCFeDe73a76E2294B82d28c2737F9eECdf0342eB', // TCTM TOKEN\r\n    97: '',\r\n  },\r\n  masterChef: {\r\n    56: '0xf54302161B1dcA5EACF43a51E81E7F99562114ED',\r\n    97: '',\r\n  },\r\n  wbnb: {\r\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    97: '0xae13d989dac2f0debff460ac112a837c89baa7cd',\r\n  },\r\n  mulltiCall: {\r\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\r\n    97: '0x79186Badee32fE71Be2cccfC0566E3b311109A2f',\r\n  },\r\n  busd: {\r\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    97: '0x8301f2213c0eed49a7e28ae4c3e91722919b8b47',\r\n  },\r\n  usdc: {\r\n    56: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',\r\n    97: '0x7ef95a0fee0dd31b22626fa2e10ee6a223f8a684',\r\n  },\r\n  usdt: {\r\n    56: '0x55d398326f99059ff775485246999027b3197955',\r\n    97: '0x7ef95a0fee0dd31b22626fa2e10ee6a223f8a684',\r\n  },\r\n}\r\n","import contracts from './contracts'\r\nimport { FarmConfig, QuoteToken } from './types'\r\n\r\nconst TCTM_BUSD_LP_MAINNET = `0xc3bdff1fa4985b9977dddf2ea2b98c75dd4ec65c`\r\n// const TCTM_BNB_LP_MAINNET = `0xc3bdff1fa4985b9977dddf2ea2b98c75dd4ec65c`\r\nconst TCTM_MAINNET = `0xBCFeDe73a76E2294B82d28c2737F9eECdf0342eB`\r\n\r\nconst farms: FarmConfig[] = [\r\n  {\r\n    risk: 1,\r\n    lpSymbol: 'TCTM-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: TCTM_BUSD_LP_MAINNET,\r\n    },\r\n    depositFeeBP: '0%',\r\n    tokenSymbol: 'TCTM',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: TCTM_MAINNET,\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  /* {\r\n    risk: 5,\r\n    lpSymbol: 'TCTM-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: TCTM_BNB_LP_MAINNET,\r\n    },\r\n    tokenSymbol: 'TCTM',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: TCTM_MAINNET,\r\n    }, \r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  }, */\r\n  {\r\n    risk: 3,\r\n    lpSymbol: 'BNB-BUSD LP',\r\n    lpAddresses: {\r\n      97: '0x01b1405bEF38652468C9f43861010eB73E0AA443',\r\n      56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f',\r\n    },\r\n    tokenSymbol: 'BNB',\r\n    tokenAddresses: {\r\n      97: '0xae13d989dac2f0debff460ac112a837c89baa7cd',\r\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n    depositFeeBP: '1%',\r\n  }, \r\n  // Pools\r\n  {\r\n    risk: 5,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'TCTM',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: TCTM_MAINNET, // TCTM-BUSD LP\r\n    },\r\n    tokenSymbol: 'TCTM',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: TCTM_MAINNET,\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  /* {\r\n    risk: 1,\r\n    lpSymbol: 'USDT-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xc15fa3e22c912a276550f3e5fe3b0deb87b55acd',\r\n    },\r\n    tokenSymbol: 'USDT',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x55d398326f99059ff775485246999027b3197955',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 2,\r\n    lpSymbol: 'ETH-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x70d8929d04b60af4fb9b58713ebcf18765ade422',\r\n    },\r\n    tokenSymbol: 'ETH',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    risk: 1,\r\n    lpSymbol: 'USDC-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x680dd100e4b394bda26a59dd5c119a391e747d18',\r\n    },\r\n    tokenSymbol: 'USDC',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 3,\r\n    lpSymbol: 'DOT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xbcd62661a6b1ded703585d3af7d7649ef4dcdb5c',\r\n    },\r\n    tokenSymbol: 'DOT',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x7083609fce4d1d8dc0c979aab8c869ea2c873402',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    risk: 4,\r\n    lpSymbol: 'CAKE-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0ed8e0a2d99643e1e65cca22ed4424090b8b7458',\r\n    },\r\n    tokenSymbol: 'CAKE',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 4,\r\n    lpSymbol: 'CAKE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xa527a61703d82139f8a06bc30097cc9caa2df5a6',\r\n    },\r\n    tokenSymbol: 'CAKE',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  // TODO: CHECK POOLS https://github.com/VikingDefi/viking-frontend-farms/blob/master/src/config/constants/farms.ts\r\n  // pools\r\n  {\r\n    risk: 5,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'TCTM',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: TCTM_BUSD_LP_MAINNET, // TCTM-BUSD LP\r\n    },\r\n    tokenSymbol: 'TCTM',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: TCTM_MAINNET,\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 1,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'BUSD',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: TCTM_BUSD_LP_MAINNET, // TCTM-BUSD LP (BUSD-BUSD will ignore)\r\n    },\r\n    tokenSymbol: 'BUSD',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 1,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'EGG',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019', // EGG-BUSD LP (BUSD-BUSD will ignore)\r\n    },\r\n    tokenSymbol: 'EGG',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 3,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'VIKING',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x9b989a7b8963f4b08ec094710e2966fb3c7f6c43', // VIKING-BUSD LP\r\n    },\r\n    tokenSymbol: 'VIKING',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x896ede222d3f7f3414e136a2791bdb08aaa25ce0',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 3,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'DOT',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x54c1ec2f543966953f2f7564692606ea7d5a184e', // DOT-BUSD LP\r\n    },\r\n    tokenSymbol: 'DOT',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x7083609fce4d1d8dc0c979aab8c869ea2c873402',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 3,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'ALPHA',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x5ba0d670ea3db79067ee6861b960f06d53712e18', // ALPHA-BUSD LP\r\n    },\r\n    tokenSymbol: 'ALPHA',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xa1faa113cbe53436df28ff0aee54275c13b40975',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 3,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'STAX',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x13abfa7b781bee80ca7fae7ec71045488d876a8d', // STAX-BUSD LP\r\n    },\r\n    tokenSymbol: 'STAX',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x0da6ed8b13214ff28e9ca979dd37439e8a88f6c4',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 3,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'LINK',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xe54a9d8412287cfc675cae18a0011483ef975f05', // LINK-BUSD LP\r\n    },\r\n    tokenSymbol: 'LINK',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xf8a0bf9cf54bb92f17374d9e9a321e6a111a51bd',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 4,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'CAKE',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0ed8e0a2d99643e1e65cca22ed4424090b8b7458', // CAKE-BUSD LP\r\n    },\r\n    tokenSymbol: 'CAKE',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 3,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'LINA',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xeb325a8ea1c5abf40c7ceaf645596c1f943d0948', // LINA-BUSD LP\r\n    },\r\n    tokenSymbol: 'LINA',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x762539b45a1dcce3d36d080f74d1aed37844b878',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 3,\r\n    lpSymbol: 'TCTM-USDT LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xc6d0728a0a6acf362cbce0433806d89942fb4403', // LINA-BUSD LP\r\n    },\r\n    tokenSymbol: 'TCTM',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: TCTM_MAINNET,\r\n    },\r\n    quoteTokenSymbol: QuoteToken.USDT,\r\n    quoteTokenAdresses: contracts.usdt,\r\n  },\r\n  {\r\n    risk: 3,\r\n    lpSymbol: 'TCTM-USDC LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xe888076a3fe450cb3b31db7dac82be38faad3174', // LINA-BUSD LP\r\n    },\r\n    tokenSymbol: 'TCTM',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: TCTM_MAINNET,\r\n    },\r\n    quoteTokenSymbol: QuoteToken.USDC,\r\n    quoteTokenAdresses: contracts.usdc,\r\n  },\r\n  {\r\n    risk: 3,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'AUTO',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x4d0228ebeb39f6d2f29ba528e2d15fc9121ead56', // LINA-BUSD LP\r\n    },\r\n    tokenSymbol: 'AUTO',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xa184088a740c695e156f91f5cc086a06bb78b827',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  }, */\r\n].map((farm, index) => ({ ...farm, pid: index }))\r\n\r\nexport default farms\r\n","import { AbiItem } from 'web3-utils'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst web3 = getWeb3()\r\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'allowance',\r\n    params: [account, p.contractAddress[CHAIN_ID]],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.methods.pendingTCTM('0', account).call()\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig] }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStatking()\r\n\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n","import { createGlobalStyle } from 'styled-components'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\r\n\r\ndeclare module 'styled-components' {\r\n  /* eslint-disable @typescript-eslint/no-empty-interface */\r\n  export interface DefaultTheme extends PancakeTheme {}\r\n}\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    font-family: 'Kanit', sans-serif;\r\n  }\r\n\r\n  @font-face {\r\n    font-family: 'taco';\r\n    src: url(/fonts/tacos.ttf);\r\n  }\r\n\r\n  body {\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n\r\n    img {\r\n      height: auto;\r\n      max-width: 100%;\r\n    }\r\n  }\r\n`\r\n\r\nexport default GlobalStyle\r\n","export const EN = { code: 'en', language: 'English' }\r\n\r\nexport const allLanguages = [\r\n  EN,\r\n]\r\n","import React, { useState, useEffect } from 'react'\r\n// import { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\r\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\n/* const fileId = 8\r\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\r\n}) */\r\n\r\n/* const fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n} */\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n     // console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`)\r\n      fetch(`./i18n/${selectedLanguage.code}.json`)\r\n        .then((r) => r.json())\r\n        // fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations(['error'])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          console.error('ERROR')\r\n          console.error(e)\r\n          setTranslations(['error'])\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","import React, { useState } from 'react'\r\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\r\nimport { light, dark } from '@pancakeswap-libs/uikit'\r\n\r\nconst CACHE_KEY = 'IS_DARK'\r\n\r\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\r\n\r\nconst ThemeContextProvider = ({ children }) => {\r\n  const [isDark, setIsDark] = useState(() => {\r\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\r\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\r\n  })\r\n\r\n  const toggleTheme = () => {\r\n    setIsDark((prevState) => {\r\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\r\n      return !prevState\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\r\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport { ThemeContext, ThemeContextProvider }\r\n","import { useContext } from 'react'\r\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\r\nimport { ThemeContext } from 'contexts/ThemeContext'\r\n\r\nconst useTheme = () => {\r\n  const { isDark, toggleTheme } = useContext(ThemeContext)\r\n  const theme = useContext(StyledThemeCopntext)\r\n  return { isDark, toggleTheme, theme }\r\n}\r\n\r\nexport default useTheme\r\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\r\n\r\nconst config: MenuEntry[] = [\r\n  {\r\n    label: 'Home',\r\n    icon: 'HomeIcon',\r\n    href: '/',\r\n  },\r\n  {\r\n    label: 'Trade',\r\n    icon: 'TradeIcon',\r\n    items: [\r\n      {\r\n        label: 'Exchange',\r\n        href: 'https://exchange.talkcryptotome.com/#/swap?outputCurrency=0x9066e87Bac891409D690cfEfA41379b34af06391',\r\n      },\r\n      {\r\n        label: 'Liquidity',\r\n        href:\r\n          'https://exchange.talkcryptotome.com/#/add/0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56/0x9066e87Bac891409D690cfEfA41379b34af06391',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    label: 'Farms',\r\n    icon: 'FarmIcon',\r\n    href: '/farms',\r\n  },\r\n  {\r\n    label: 'Pool',\r\n    icon: 'PoolIcon',\r\n    href: '/pools',\r\n  },\r\n  {\r\n    label: 'Vault',\r\n    icon: 'PoolIcon',\r\n    href: '/vaults',\r\n  },\r\n  {\r\n    label: 'Bridge',\r\n    icon: 'PoolIcon',\r\n    href: '/bridges',\r\n  },\r\n  {\r\n    label: 'Aggregator',\r\n    icon: 'PoolIcon',\r\n    href: '/aggregator',\r\n  },\r\n\r\n]\r\n\r\nexport default config\r\n","import React, { useContext } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { allLanguages } from 'config/localisation/languageCodes'\r\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\r\nimport config from './config'\r\n\r\nconst Menu = (props) => {\r\n  const { account, connect, reset } = useWallet()\r\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\r\n  const { isDark, toggleTheme } = useTheme()\r\n\r\n  return (\r\n    <UikitMenu\r\n      account={account}\r\n      login={connect}\r\n      logout={reset}\r\n      isDark={isDark}\r\n      toggleTheme={toggleTheme}\r\n      currentLang={selectedLanguage && selectedLanguage.code}\r\n      langs={allLanguages}\r\n      setLang={setSelectedLanguage}\r\n      links={config}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Spinner } from '@pancakeswap-libs/uikit'\r\nimport Page from './layout/Page'\r\n\r\nconst Wrapper = styled(Page)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst PageLoader: React.FC = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Spinner />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PageLoader\r\n","import React, { useEffect, Suspense, lazy } from 'react'\r\nimport { BrowserRouter as Router, /* Redirect, */ Route, Switch } from 'react-router-dom'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useFetchPublicData } from 'state/hooks'\r\nimport GlobalStyle from './style/Global'\r\nimport Menu from './components/Menu'\r\nimport PageLoader from './components/PageLoader'\r\n// import Vault from 'views/Vault'\r\n\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page'\r\nconst Home = lazy(() => import('./views/Home'))\r\nconst Farms = lazy(() => import('./views/Farms'))\r\nconst Vaults = lazy(() => import('./views/Vault'))\r\nconst Bridges = lazy(() => import('./views/Bridge'))\r\nconst Aggregators = lazy(() => import('./views/Aggregator'))\r\n// const Lottery = lazy(() => import('./views/Lottery'))\r\n// const Pools = lazy(() => import('./views/Pools'))\r\n// const Ifos = lazy(() => import('./views/Ifos'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\n// const Nft = lazy(() => import('./views/Nft'))\r\n\r\n// This config is required for number formating\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n  const { account, connect } = useWallet()\r\n  useEffect(() => {\r\n    if (!account && window.localStorage.getItem('accountStatus')) {\r\n      connect('injected')\r\n    }\r\n  }, [account, connect])\r\n\r\n  useFetchPublicData()\r\n\r\n  return (\r\n    <Router>\r\n      <ResetCSS />\r\n      <GlobalStyle />\r\n      <Menu>\r\n        <Suspense fallback={<PageLoader />}>\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/farms\">\r\n              <Farms />\r\n            </Route>\r\n            <Route path=\"/pools\">\r\n              <Farms tokenMode />\r\n            </Route>\r\n            <Route path=\"/vaults\">\r\n              <Vaults />\r\n            </Route>\r\n            <Route path=\"/bridges\">\r\n              <Bridges />\r\n            </Route>\r\n            <Route path=\"/aggregator\">\r\n              <Aggregators />\r\n            </Route>\r\n            {/* <Route path=\"/pools\"> */}\r\n            {/*  <Pools /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/lottery\"> */}\r\n            {/*  <Lottery /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/ifo\"> */}\r\n            {/*  <Ifos /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/nft\"> */}\r\n            {/*  <Nft /> */}\r\n            {/* </Route> */}\r\n            {/* Redirect */}\r\n            {/* <Route path=\"/staking\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/syrup\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* 404 */}\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </Suspense>\r\n      </Menu>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { getWeb3 } from 'utils/web3'\r\n\r\nconst BlockContext = React.createContext(0)\r\n\r\nconst BlockContextProvider = ({ children }) => {\r\n  const previousBlock = useRef(0)\r\n  const [block, setBlock] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const web3 = getWeb3()\r\n    const interval = setInterval(async () => {\r\n      const blockNumber = await web3.eth.getBlockNumber()\r\n      if (blockNumber !== previousBlock.current) {\r\n        previousBlock.current = blockNumber\r\n        setBlock(blockNumber)\r\n      }\r\n    }, 6000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\r\n}\r\n\r\nexport { BlockContext, BlockContextProvider }\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport farmsReducer from './farms'\r\nimport poolsReducer from './pools'\r\nimport vaultsReducer from './vaults'\r\n\r\nexport default configureStore({\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  reducer: {\r\n    farms: farmsReducer,\r\n    pools: poolsReducer,\r\n    vaults: vaultsReducer,\r\n  },\r\n})\r\n","import React from 'react'\r\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\r\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\r\nimport * as bsc from '@binance-chain/bsc-use-wallet'\r\nimport { Provider } from 'react-redux'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\r\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\r\nimport { BlockContextProvider } from 'contexts/BlockContext'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport store from 'state'\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  const rpcUrl = getRpcUrl()\r\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID)\r\n  return (\r\n    <Provider store={store}>\r\n      <ThemeContextProvider>\r\n        <LanguageContextProvider>\r\n          <bsc.UseWalletProvider\r\n            chainId={chainId}\r\n            connectors={{\r\n              walletconnect: { rpcUrl },\r\n              bsc,\r\n            }}\r\n          >\r\n            <BlockContextProvider>\r\n              <RefreshContextProvider>\r\n                <ModalProvider>{children}</ModalProvider>\r\n              </RefreshContextProvider>\r\n            </BlockContextProvider>\r\n          </bsc.UseWalletProvider>\r\n        </LanguageContextProvider>\r\n      </ThemeContextProvider>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default Providers\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport Providers from './Providers'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Providers>\r\n      <App />\r\n    </Providers>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n"],"sourceRoot":""}