{"version":3,"sources":["views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","StyledLinkExternal","LinkExternal","theme","colors","text","primary","DetailsSection","bscScanAddress","removed","totalValueFormated","lpLabel","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","TranslateString","useI18n","liquidityUrlPathParts","getLiquidityUrlPathParts","justifyContent","href","external","bold","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","variant","DepositModal","max","onConfirm","onDismiss","tokenName","depositFeeBP","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","value","handleSelectMax","title","TokenInput","onSelectMax","onChange","symbol","ModalActions","onClick","disabled","a","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","rawStakedBalance","getBalanceNumber","displayBalance","toLocaleString","useModal","onPresentDeposit","onPresentWithdraw","color","mr","BalanceAndCompound","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","size","marginBottom","toString","Action","CardActions","farm","ethereum","account","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","isTokenOnly","useFarmUser","allowance","lpAddress","process","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","lpContract","getContract","onApprove","useApprove","handleApprove","console","error","textTransform","fontSize","pr","mt","fullWidth","UnlockButton","Grid","GridItem","Description","Text","ApyCalculatorModal","cakePrice","apy","farmApy","times","BigNumber","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","calculateCakeEarnedPerThousandDollars","numberOfDays","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","apyModalRoi","amountEarned","amountInvested","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","props","card","background","Divider","borderColor","ExpandingWrapper","expanded","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","risk","style","display","CardActionsContainer","ExpandableSectionButton","FarmTabButtons","useRouteMatch","url","isExact","activeIndex","as","Link","to","textSubtle","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","useWallet","tokenMode","dispatch","useDispatch","fastRefresh","useRefresh","useEffect","fetchFarmUserDataAsync","activeFarms","filter","inactiveFarms","farmsList","farmsToDisplay","map","cakeRewardPerYear","TCTMPerBlock","poolWeight","pow","BLOCKS_PER_YEAR","comparedTo","backgroundSize","backgroundrepeat","Page","textAlign","position","top","right","exact"],"mappings":"6XAiBMA,EAAUC,IAAOC,IAAV,iDAIPC,EAAqBF,YAAOG,IAAPH,CAAH,oOAGb,qBAAGI,MAAkBC,OAAOC,QAQ3B,qBAAGF,MAAkBC,OAAOE,WAuCzBC,EAnC0C,SAAC,GAQnD,IAPLC,EAOI,EAPJA,eACAC,EAMI,EANJA,QACAC,EAKI,EALJA,mBACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,mBACAC,EAEI,EAFJA,iBACAC,EACI,EADJA,eAEMC,EAAkBC,cAClBC,EAAwBC,YAAyB,CAAEN,qBAAoBC,mBAAkBC,mBAE/F,OACE,eAAChB,EAAD,WACE,eAAC,IAAD,CAAMqB,eAAe,gBAArB,UACE,eAAC,IAAD,WAAOJ,EAAgB,IAAK,SAA5B,OACA,cAACd,EAAD,CAAoBmB,KAAI,qDAAgDH,GAAxE,SACGN,QAGHF,GACA,eAAC,IAAD,CAAMU,eAAe,gBAArB,UACE,eAAC,IAAD,WAAOJ,EAAgB,GAAI,mBAA3B,OACA,cAAC,IAAD,UAAOL,OAGX,cAAC,IAAD,CAAMS,eAAe,aAArB,SACE,cAAC,IAAD,CAAME,UAAQ,EAACD,KAAMZ,EAAgBc,MAAM,EAA3C,SACGP,EAAgB,IAAK,2B,SClD1BjB,EAAUC,YAAOwB,IAAPxB,CAAH,sEAMPyB,EAAgBzB,YAAO0B,IAAP1B,CAAH,iDA4BJ2B,EAxBuC,SAAC,GAOhD,IANLf,EAMI,EANJA,QACAgB,EAKI,EALJA,WAEAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,YACAC,EACI,EADJA,WAEA,OACE,eAAC,EAAD,CAASX,eAAe,gBAAgBY,WAAW,SAASC,GAAG,OAA/D,UACE,cAAC,IAAD,CAAOC,IAAG,wBAAmBL,EAAnB,QAAoCM,IAAKL,EAAaM,MAAO,GAAIC,OAAQ,KACnF,eAAC,IAAD,CAAMC,cAAc,SAASN,WAAW,WAAxC,UACE,cAAC,IAAD,CAASC,GAAG,MAAZ,SAAmBrB,IACnB,eAAC,IAAD,CAAMQ,eAAe,SAArB,UACkB,IAAfW,EAAmB,cAAC,IAAD,IAAe,KAGnC,cAACN,EAAD,CAAec,QAAQ,YAAvB,SAAoCX,c,sGCwB/BY,GAjDmC,SAAC,GAAqE,IAAnEC,EAAkE,EAAlEA,IAAKC,EAA6D,EAA7DA,UAAWC,EAAkD,EAAlDA,UAAkD,IAAvCC,iBAAuC,MAA3B,GAA2B,MAAvBC,oBAAuB,MAAR,EAAQ,EACrH,EAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACMlC,EAAkBC,cAClBkC,EAAcC,mBAAQ,WAC1B,OAAOC,aAAsBZ,KAC5B,CAACA,IAEEa,EAAeC,uBACnB,SAACC,GACCR,EAAOQ,EAAEC,cAAcC,SAEzB,CAACV,IAGGW,EAAkBJ,uBAAY,WAClCP,EAAOG,KACN,CAACA,EAAaH,IAEjB,OACE,eAAC,IAAD,CAAOY,MAAK,UAAK5C,EAAgB,IAAK,WAA1B,YAAwC4B,EAAxC,WAA4DD,UAAWA,EAAnF,UACE,cAACkB,GAAA,EAAD,CACEH,MAAOX,EACPe,YAAaH,EACbI,SAAUT,EACVb,IAAKU,EACLa,OAAQpB,EACRC,aAAcA,IAEhB,eAACoB,GAAA,EAAD,WACE,cAAC,IAAD,CAAQ1B,QAAQ,YAAY2B,QAASvB,EAArC,SACG3B,EAAgB,IAAK,YAExB,cAAC,IAAD,CACEmD,SAAUlB,EACViB,QAAO,sBAAE,sBAAAE,EAAA,6DACPlB,GAAa,GADN,SAEDR,EAAUK,GAFT,OAGPG,GAAa,GACbP,IAJO,2CAFX,SASGM,EAAYjC,EAAgB,IAAK,wBAA0BA,EAAgB,IAAK,oBCK5EqD,GAhDqC,SAAC,GAAmD,IAAjD3B,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,UAAWF,EAA0B,EAA1BA,IAA0B,IAArBG,iBAAqB,MAAT,GAAS,EACrG,EAAsBE,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACMlC,EAAkBC,cAClBkC,EAAcC,mBAAQ,WAC1B,OAAOC,aAAsBZ,KAC5B,CAACA,IAEEa,EAAeC,uBACnB,SAACC,GACCR,EAAOQ,EAAEC,cAAcC,SAEzB,CAACV,IAGGW,EAAkBJ,uBAAY,WAClCP,EAAOG,KACN,CAACA,EAAaH,IAEjB,OACE,eAAC,IAAD,CAAOY,MAAK,mBAAchB,GAAaD,UAAWA,EAAlD,UACE,cAACkB,GAAA,EAAD,CACEC,YAAaH,EACbI,SAAUT,EACVI,MAAOX,EACPN,IAAKU,EACLa,OAAQpB,IAEV,eAACqB,GAAA,EAAD,WACE,cAAC,IAAD,CAAQ1B,QAAQ,YAAY2B,QAASvB,EAArC,SACG3B,EAAgB,IAAK,YAExB,cAAC,IAAD,CACEmD,SAAUlB,EACViB,QAAO,sBAAE,sBAAAE,EAAA,6DACPlB,GAAa,GADN,SAEDR,EAAUK,GAFT,OAGPG,GAAa,GACbP,IAJO,2CAFX,SASGM,EAAYjC,EAAgB,IAAK,wBAA0BA,EAAgB,IAAK,oBCrCrFsD,GAAoBtE,IAAOC,IAAV,8EA6CRsE,GAtCqC,SAAC,GAAmE,IAAjEC,EAAgE,EAAhEA,cAAeC,EAAiD,EAAjDA,aAAc7B,EAAmC,EAAnCA,UAAW8B,EAAwB,EAAxBA,IAAK7B,EAAmB,EAAnBA,aAC5F7B,EAAkBC,cAChB0D,EAAYC,aAASF,GAArBC,QACAE,EAAcC,aAAWJ,GAAzBG,UAEFE,EAAmBC,aAAiBR,GACpCS,EAAiBF,EAAiBG,iBAExC,EAA2BC,YACzB,cAAC,GAAD,CAAc1C,IAAKgC,EAAc/B,UAAWiC,EAAS/B,UAAWA,EAAWC,aAAcA,KADpFuC,EAAP,oBAGA,EAA4BD,YAC1B,cAAC,GAAD,CAAe1C,IAAK+B,EAAe9B,UAAWmC,EAAWjC,UAAWA,KAD/DyC,EAAP,oBAmBA,OACE,eAAC,IAAD,CAAMjE,eAAe,gBAAgBY,WAAW,SAAhD,UACE,cAAC,IAAD,CAASsD,MAA4B,IAArBP,EAAyB,eAAiB,OAA1D,SAAmEE,IAhBzC,IAArBF,EACL,cAAC,IAAD,CAAQb,QAASkB,EAAjB,SAAoCpE,EAAgB,IAAK,WAEzD,eAACsD,GAAD,WACE,cAAC,IAAD,CAAY/B,QAAQ,WAAW2B,QAASmB,EAAmBE,GAAG,MAA9D,SACE,cAAC,IAAD,CAAWD,MAAM,cAEnB,cAAC,IAAD,CAAY/C,QAAQ,WAAW2B,QAASkB,EAAxC,SACE,cAAC,IAAD,CAASE,MAAM,qB,UCpCnBE,GAAqBxF,IAAOC,IAAV,oIAkDTwF,GA3CuC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SAAUhB,EAAU,EAAVA,IAC3D1D,EAAkBC,cACxB,EAAkC6B,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACQyC,EAAaC,aAAWlB,GAAxBiB,SACAhB,EAAYC,aAASF,GAArBC,QAEFkB,EAAqBb,aAAiBU,GACtCT,EAAiBY,EAAmBX,iBAE1C,OACE,eAAC,IAAD,CAAMjD,GAAG,MAAMb,eAAe,gBAAgBY,WAAW,SAAzD,UACE,cAAC,IAAD,CAASsD,MAA8B,IAAvBO,EAA2B,eAAiB,OAA5D,SAAqEZ,IACrE,eAACO,GAAD,WACW,IAARd,EACC,cAAC,IAAD,CACEP,SAAiC,IAAvB0B,GAA4B5C,EACtC6C,KAAK,KACLvD,QAAQ,YACRwD,aAAa,OACb7B,QAAO,sBAAE,sBAAAE,EAAA,6DACPlB,GAAa,GADN,SAEDyB,EAAQkB,EAAmBG,YAF1B,OAGP9C,GAAa,GAHN,2CALX,SAWGlC,EAAgB,IAAK,cAEtB,KACJ,cAAC,IAAD,CACEmD,SAAiC,IAAvB0B,GAA4B5C,EACtCiB,QAAO,sBAAE,sBAAAE,EAAA,6DACPlB,GAAa,GADN,SAEDyC,IAFC,OAGPzC,GAAa,GAHN,2CAFX,SAQGlC,EAAgB,IAAK,oBC3C1BiF,GAASjG,IAAOC,IAAV,kDAmFGiG,GAtEqC,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAC/DrF,EAAkBC,cACxB,EAAkD6B,oBAAS,GAA3D,mBAAOwD,EAAP,KAA0BC,EAA1B,KACA,EAAwEC,YAAeL,EAAKzB,KAApFA,EAAR,EAAQA,IAAK+B,EAAb,EAAaA,YAAa1F,EAA1B,EAA0BA,eAAgB2F,EAA1C,EAA0CA,YAAa7D,EAAvD,EAAuDA,aACvD,EAA6D8D,YAAYjC,GAAjEkC,EAAR,EAAQA,UAAWnC,EAAnB,EAAmBA,aAAcD,EAAjC,EAAiCA,cAAekB,EAAhD,EAAgDA,SAC1CmB,EAAYJ,EAAYK,IACxBC,EAAehG,EAAe+F,IAC9BE,EAASb,EAAKc,SAASC,cACvBC,EAAad,GAAWO,GAAaA,EAAUQ,cAAc,GAE7DC,EAAajE,mBAAQ,WACzB,OAAIsD,EACKY,YAAYlB,EAAsBW,GAEpCO,YAAYlB,EAAsBS,KACxC,CAACT,EAAUS,EAAWE,EAAcL,IAE/Ba,EAAcC,aAAWH,GAAzBE,UAEFE,EAAgBlE,sBAAW,sBAAC,sBAAAa,EAAA,sEAE9BmC,GAAqB,GAFS,SAGxBgB,IAHwB,OAI9BhB,GAAqB,GAJS,gDAM9BmB,QAAQC,MAAR,MAN8B,yDAQ/B,CAACJ,IAkBJ,OACE,eAACtB,GAAD,WACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAM1E,MAAI,EAACqG,cAAc,YAAYtC,MAAM,YAAYuC,SAAS,OAAOC,GAAG,MAA1E,kBAIA,cAAC,IAAD,CAAMvG,MAAI,EAACqG,cAAc,YAAYtC,MAAM,aAAauC,SAAS,OAAjE,SACG7G,EAAgB,IAAK,eAG1B,cAAC,GAAD,CAAe0E,SAAUA,EAAUhB,IAAKA,IACxC,eAAC,IAAD,WACE,cAAC,IAAD,CAAMnD,MAAI,EAACqG,cAAc,YAAYtC,MAAM,YAAYuC,SAAS,OAAOC,GAAG,MAA1E,SACGd,IAEH,cAAC,IAAD,CAAMzF,MAAI,EAACqG,cAAc,YAAYtC,MAAM,aAAauC,SAAS,OAAjE,SACG7G,EAAgB,IAAK,eAGxBqF,EAnCGc,EACL,cAAC,GAAD,CACE3C,cAAeA,EACfC,aAAcA,EACd7B,UAAWoE,EACXtC,IAAKA,EACL7B,aAAcA,IAGhB,cAAC,IAAD,CAAQkF,GAAG,MAAMC,WAAS,EAAC7D,SAAUmC,EAAmBpC,QAASuD,EAAjE,SACGzG,EAAgB,IAAK,sBAyBZ,cAACiH,EAAA,EAAD,CAAcF,GAAG,MAAMC,WAAS,Q,UCzE5CE,GAAOlI,IAAOC,IAAV,wJAOJkI,GAAWnI,IAAOC,IAAV,sDAIRmI,GAAcpI,YAAOqI,IAAPrI,CAAH,yEA0GFsI,GArG+C,SAAC,GAQxD,IAPL3F,EAOI,EAPJA,UACA/B,EAMI,EANJA,QACAC,EAKI,EALJA,mBACAC,EAII,EAJJA,iBACAC,EAGI,EAHJA,eACAwH,EAEI,EAFJA,UACAC,EACI,EADJA,IAEMxH,EAAkBC,cAClBC,EAAwBC,YAAyB,CAAEN,qBAAoBC,mBAAkBC,mBACzF0H,EAAUD,EAAIE,MAAM,IAAIC,IAAU,MAAMC,WACxCC,EAAgC,IAAON,EAAUK,WAEjDE,EAA0BC,aAAsC,CAAEC,aAAc,EAAGP,UAASF,cAC5FU,EAA0BF,aAAsC,CAAEC,aAAc,EAAGP,UAASF,cAC5FW,EAA2BH,aAAsC,CAAEC,aAAc,GAAIP,UAASF,cAC9FY,EAA4BJ,aAAsC,CAAEC,aAAc,IAAKP,UAASF,cAEtG,OACE,eAAC,IAAD,CAAO3E,MAAM,MAAMjB,UAAWA,EAA9B,UACE,eAACuF,GAAD,WACE,cAACC,GAAD,UACE,cAAC,IAAD,CAAMN,SAAS,OAAOtG,MAAI,EAAC+D,MAAM,aAAasC,cAAc,YAAY3F,GAAG,OAA3E,SACGjB,EAAgB,IAAK,iBAG1B,cAACmH,GAAD,UACE,cAAC,IAAD,CAAMN,SAAS,OAAOtG,MAAI,EAAC+D,MAAM,aAAasC,cAAc,YAAY3F,GAAG,OAA3E,SACGjB,EAAgB,IAAK,WAG1B,cAACmH,GAAD,UACE,cAAC,IAAD,CAAMN,SAAS,OAAOtG,MAAI,EAAC+D,MAAM,aAAasC,cAAc,YAAY3F,GAAG,OAA3E,SACGjB,EAAgB,IAAK,sBAI1B,cAACmH,GAAD,UACE,cAAC,IAAD,mBAEF,cAACA,GAAD,UACE,eAAC,IAAD,WACGiB,aAAY,CAAEC,aAAcP,EAAyBQ,eAAgBT,IADxE,SAIF,cAACV,GAAD,UACE,cAAC,IAAD,UAAOW,MAGT,cAACX,GAAD,UACE,cAAC,IAAD,mBAEF,cAACA,GAAD,UACE,eAAC,IAAD,WACGiB,aAAY,CAAEC,aAAcJ,EAAyBK,eAAgBT,IADxE,SAIF,cAACV,GAAD,UACE,cAAC,IAAD,UAAOc,MAGT,cAACd,GAAD,UACE,cAAC,IAAD,oBAEF,cAACA,GAAD,UACE,eAAC,IAAD,WACGiB,aAAY,CAAEC,aAAcH,EAA0BI,eAAgBT,IADzE,SAIF,cAACV,GAAD,UACE,cAAC,IAAD,UAAOe,MAGT,cAACf,GAAD,UACE,cAAC,IAAD,0BAEF,cAACA,GAAD,UACE,eAAC,IAAD,WACGiB,aAAY,CAAEC,aAAcF,EAA2BG,eAAgBT,IAD1E,SAIF,cAACV,GAAD,UACE,cAAC,IAAD,UAAOgB,SAGX,cAACf,GAAD,CAAaP,SAAS,OAAOvC,MAAM,aAAnC,SACGtE,EACC,IACA,sKAGJ,cAAC,IAAD,CAAMI,eAAe,SAArB,SACE,eAAC,IAAD,CAAcC,KAAI,qDAAgDH,GAAlE,UACGF,EAAgB,IAAK,OADxB,IACiCJ,WCxF1B2I,GA1B6B,SAAC,GAOtC,IANL3I,EAMI,EANJA,QACAC,EAKI,EALJA,mBACAC,EAII,EAJJA,iBACAC,EAGI,EAHJA,eACAwH,EAEI,EAFJA,UACAC,EACI,EADJA,IAEA,EAA4BrD,YAC1B,cAAC,GAAD,CACEvE,QAASA,EACTC,mBAAoBA,EACpBC,iBAAkBA,EAClBC,eAAgBA,EAChBwH,UAAWA,EACXC,IAAKA,KAPFgB,EAAP,oBAWA,OACE,cAAC,IAAD,CAAYtF,QAASsF,EAAmBjH,QAAQ,OAAOuD,KAAK,KAAK2D,GAAG,MAApE,SACE,cAAC,IAAD,OCjBAC,GAAeC,YAAH,8KAYZC,GAAmB5J,IAAOC,IAAV,0nBAgBPyJ,IAWTG,GAAQ7J,IAAOC,IAAV,4UAEK,SAAC6J,GAAD,OAAWA,EAAM1J,MAAM2J,KAAKC,cAWtCC,GAAUjK,IAAOC,IAAV,4GACS,qBAAGG,MAAkBC,OAAO6J,eAM5CC,GAAmBnK,IAAOC,IAAV,iEACV,SAAC6J,GAAD,OAAYA,EAAMM,SAAW,OAAS,SAyHnCC,GA5G2B,SAAC,GAA+D,IAA7DlE,EAA4D,EAA5DA,KAAMzF,EAAsD,EAAtDA,QAAS6H,EAA6C,EAA7CA,UAAW+B,EAAkC,EAAlCA,SAAUlE,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QACnFrF,EAAkBC,cAExB,EAA0D6B,oBAAS,GAAnE,mBAAOyH,EAAP,KAA8BC,EAA9B,KAKM3I,EAAYsE,EAAKO,YACnBP,EAAKrE,YAAY2I,cADH,UAEXtE,EAAKrE,YAAY2I,cAFN,YAEuBtE,EAAKrF,iBAAiB2J,eAEzDC,EAAwBtH,mBAAQ,WACpC,OAAK+C,EAAKwE,oBAGNxE,EAAKrF,mBAAqB8J,IAAWC,IAChCP,EAAS5B,MAAMvC,EAAKwE,qBAEzBxE,EAAKrF,mBAAqB8J,IAAWE,KAChCvC,EAAUG,MAAMvC,EAAKwE,qBAEvBxE,EAAKwE,oBARH,OASR,CAACL,EAAU/B,EAAWpC,EAAKwE,oBAAqBxE,EAAKrF,mBAElDH,EAAqB+J,EAAU,WAC7BK,OAAOL,GAAYxF,oBAAe8F,EAAW,CAAEC,sBAAuB,KAC1E,IAEErK,EAAUuF,EAAKc,SAEfiE,EACJ/E,EAAKqC,KACLrC,EAAKqC,IAAIE,MAAM,IAAIC,IAAU,MAAMC,WAAW1D,oBAAe8F,EAAW,CACtEG,sBAAuB,EACvBF,sBAAuB,IAGnBpK,EAA+DsF,EAA/DtF,mBAAoBC,EAA2CqF,EAA3CrF,iBAAkBC,EAAyBoF,EAAzBpF,eAAgBqK,EAASjF,EAATiF,KAE9D,OACE,eAACvB,GAAD,WACwB,SAArB1D,EAAKrE,aAA0B,cAAC8H,GAAD,IAChC,cAAC,EAAD,CACEhJ,QAASA,EACTgB,WAAYuE,EAAKvE,WACjBwJ,KAAMA,EACNrJ,WAAYoE,EAAKtD,aACjBhB,UAAWA,EACXC,YAAaqE,EAAKrE,eAElBpB,GACA,eAAC,IAAD,CAAMU,eAAe,gBAAgBY,WAAW,SAAhD,UACE,eAAC,IAAD,WAAOhB,EAAgB,IAAK,OAA5B,OACA,cAAC,IAAD,CAAMO,MAAI,EAAC8J,MAAO,CAAEC,QAAS,OAAQtJ,WAAY,UAAjD,SACGmE,EAAKqC,IACJ,qCACE,cAAC,GAAD,CACE5H,QAASA,EACTC,mBAAoBA,EACpBC,iBAAkBA,EAClBC,eAAgBA,EAChBwH,UAAWA,EACXC,IAAKrC,EAAKqC,MAEX0C,EATH,OAYA,cAAC,IAAD,CAAU7I,OAAQ,GAAID,MAAO,UAKrC,eAAC,IAAD,CAAMhB,eAAe,gBAArB,UACE,eAAC,IAAD,WAAOJ,EAAgB,IAAK,QAA5B,OACA,cAAC,IAAD,CAAMO,MAAI,EAAV,SA7CY,YA+Cd,eAAC,IAAD,CAAMH,eAAe,gBAArB,UACE,eAAC,IAAD,CAAMiK,MAAO,CAAExD,SAAU,QAAzB,UAAoC7G,EAAgB,MAAO,eAA3D,OACA,eAAC,IAAD,CAAMO,MAAI,EAAC8J,MAAO,CAAExD,SAAU,QAA9B,UACG1B,EAAKtD,aAAe,IADvB,UAIF,cAAC0I,GAAD,CAAsBpF,KAAMA,EAAMC,SAAUA,EAAUC,QAASA,IAC/D,cAAC4D,GAAD,IACA,cAACuB,EAAA,EAAD,CACEtH,QAAS,kBAAMsG,GAA0BD,IACzCH,SAAUG,IAEZ,cAACJ,GAAD,CAAkBC,SAAUG,EAA5B,SACE,cAAC,EAAD,CACE7J,QAASA,EACTD,eACE0F,EAAKO,YAAL,oCACiCP,EAAKpF,eAAe+F,KADrD,oCAEiCX,EAAKM,YAAYK,KAEpDnG,mBAAoBA,EACpBC,QAASA,EACTC,mBAAoBA,EACpBC,iBAAkBA,EAClBC,eAAgBA,U,UCzKX0K,GAlBQ,WACrB,MAAyBC,cAAjBC,EAAR,EAAQA,IAAKC,EAAb,EAAaA,QACP5K,EAAkBC,cAExB,OACE,cAAC,GAAD,UACE,eAAC,IAAD,CAAY4K,YAAcD,EAAc,EAAJ,EAAO9F,KAAK,KAAKvD,QAAQ,SAA7D,UACE,cAAC,IAAD,CAAgBuJ,GAAIC,KAAMC,GAAE,UAAKL,GAAjC,SACG3K,EAAgB,IAAK,YAExB,cAAC,IAAD,CAAgB8K,GAAIC,KAAMC,GAAE,UAAKL,EAAL,YAA5B,SACG3K,EAAgB,IAAK,oBAS1BjB,GAAUC,IAAOC,IAAV,0HCxBED,OAAOC,IAAtB,8GACsB,qBAAGG,MAAkBC,OAAO4L,cC+HnCC,GA3GqB,SAACC,GACnC,IAAQC,EAASV,cAATU,KACFpL,EAAkBC,cAClBoL,EAAUC,cACV/D,EAAYgE,cACZjC,EAAWkC,cACjB,EAAuEC,cAA/DpG,EAAR,EAAQA,QAASD,EAAjB,EAAiBA,SACTsG,EAAcP,EAAdO,UAEFC,EAAWC,cACTC,EAAgBC,cAAhBD,YACRE,qBAAU,WACJ1G,GACFsG,EAASK,YAAuB3G,MAEjC,CAACA,EAASsG,EAAUE,IAEvB,IAAMI,EAAcZ,EAAQa,QAAO,SAAC/G,GAAD,QAAYA,EAAKO,gBAAkBgG,GAAiC,OAApBvG,EAAKvE,cAClFuL,EAAgBd,EAAQa,QAAO,SAAC/G,GAAD,QAAYA,EAAKO,gBAAkBgG,GAAiC,OAApBvG,EAAKvE,cAKpFwL,EAAY7J,uBAChB,SAAC8J,EAAgB3M,GAyBf,OAvBqD2M,EAAeC,KAAI,SAACnH,GAIvE,IAGMoH,EAHqB,IAAI5E,IAAUxC,EAAKqH,cAAgB,GAC3D9E,MAAM,IAAIC,IAAUxC,EAAKsH,aACzBxN,IAAI,IAAI0I,IAAU,IAAI+E,IAAI,KACgBhF,MAAMiF,KAE/CnF,EAAMD,EAAUG,MAAM6E,GAEtB7C,EAAa,IAAI/B,IAAUxC,EAAKwE,qBAAuB,GAU3D,OARIxE,EAAKrF,mBAAqB8J,IAAWC,MACvCH,EAAaA,EAAWhC,MAAM4B,IAG5BI,EAAWkD,WAAW,GAAK,IAC7BpF,EAAMA,EAAIvI,IAAIyK,IAGT,2BAAKvE,GAAZ,IAAkBqC,WAES8E,KAAI,SAACnH,GAAD,OAC/B,cAAC,GAAD,CAEEA,KAAMA,EACNzF,QAASA,EACT4J,SAAUA,EACV/B,UAAWA,EACXnC,SAAUA,EACVC,QAASA,GANJF,EAAKzB,UAUhB,CAAC4F,EAAUjE,EAASkC,EAAWnC,IAG3BiF,EAASqB,EAEX,GADA,CAAE1C,WAAY,QAAS6D,eAAgB,UAAWxL,OAAQ,IAAKyL,iBAAkB,aAGrF,OACE,eAACC,EAAA,EAAD,WACE,sBAAK1C,MAAOA,EAAZ,UACE,cAAC,IAAD,CAASS,GAAG,KAAKhG,KAAK,KAAKR,MAAM,UAAUrD,GAAG,OAAOoJ,MAAO,CAAE2C,UAAW,UAAzE,SAEMhN,EAAgB,MADnB0L,EAC0B,4BACA,kCAK5BA,GACE,qBACCxK,IAAI,GACJC,IAAI,GACJC,MAAO,IACPiJ,MAAO,CAAE4C,SAAU,WAAYC,IAAK,GAAIC,MAAO,SAIrD,cAAC,GAAD,IACA,gCACE,cAAC,GAAD,IACA,eAAC3M,EAAA,EAAD,WACE,cAAC,IAAD,CAAO4M,OAAK,EAAChC,KAAI,UAAKA,GAAtB,SACGgB,EAAUH,GAAa,KAE1B,cAAC,IAAD,CAAOmB,OAAK,EAAChC,KAAI,UAAKA,EAAL,YAAjB,SACGgB,EAAUD,GAAe","file":"static/js/18.e3bef4ec.chunk.js","sourcesContent":["import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Address } from 'config/constants/types'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\r\n          {lpLabel}\r\n        </StyledLinkExternal>\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\r\n          <Text>{totalValueFormated}</Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link external href={bscScanAddress} bold={false}>\r\n          {TranslateString(356, 'View on BscScan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { /* CommunityTag, CoreTag, */ NoFeeTag /* , RiskTag */ } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  risk?: number\r\n  depositFee?: number\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  // risk,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {depositFee === 0 ? <NoFeeTag /> : null}\r\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\r\n          {/* <RiskTag risk={risk} /> */}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', depositFeeBP = 0 }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        depositFeeBP={depositFeeBP}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP }) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport styled from 'styled-components'\r\nimport useStake from '../../../../hooks/useStake'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n`\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const { onStake } = useStake(pid)\r\n\r\n  const rawEarningsBalance = getBalanceNumber(earnings)\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      <BalanceAndCompound>\r\n        {pid === 9 ? (\r\n          <Button\r\n            disabled={rawEarningsBalance === 0 || pendingTx}\r\n            size=\"sm\"\r\n            variant=\"secondary\"\r\n            marginBottom=\"15px\"\r\n            onClick={async () => {\r\n              setPendingTx(true)\r\n              await onStake(rawEarningsBalance.toString())\r\n              setPendingTx(false)\r\n            }}\r\n          >\r\n            {TranslateString(999, 'Compound')}\r\n          </Button>\r\n        ) : null}\r\n        <Button\r\n          disabled={rawEarningsBalance === 0 || pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n        >\r\n          {TranslateString(999, 'Harvest')}\r\n        </Button>\r\n      </BalanceAndCompound>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useMemo, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { getContract } from 'utils/erc20'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromPid, /* useFarmFromSymbol, */ useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpContract = useMemo(() => {\r\n    if (isTokenOnly) {\r\n      return getContract(ethereum as provider, tokenAddress)\r\n    }\r\n    return getContract(ethereum as provider, lpAddress)\r\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        depositFeeBP={depositFeeBP}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\r\n        {TranslateString(999, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          TCTM\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\nimport { Address } from 'config/constants/types'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\r\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'TCTM per $1000')}\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          999,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\r\nimport { Address } from 'config/constants/types'\r\nimport ApyCalculatorModal from './ApyCalculatorModal'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      lpLabel={lpLabel}\r\n      quoteTokenAdresses={quoteTokenAdresses}\r\n      quoteTokenSymbol={quoteTokenSymbol}\r\n      tokenAddresses={tokenAddresses}\r\n      cakePrice={cakePrice}\r\n      apy={apy}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\r\n      <CalculateIcon />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\n// import { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  const farmImage = farm.isTokenOnly\r\n    ? farm.tokenSymbol.toLowerCase()\r\n    : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol\r\n  const earnLabel = 'TCTM'\r\n  const farmAPY =\r\n    farm.apy &&\r\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2,\r\n    })\r\n\r\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.tokenSymbol === 'TCTM' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        risk={risk}\r\n        depositFee={farm.depositFeeBP}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{TranslateString(352, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton\r\n                  lpLabel={lpLabel}\r\n                  quoteTokenAdresses={quoteTokenAdresses}\r\n                  quoteTokenSymbol={quoteTokenSymbol}\r\n                  tokenAddresses={tokenAddresses}\r\n                  cakePrice={cakePrice}\r\n                  apy={farm.apy}\r\n                />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\r\n        <Text bold style={{ fontSize: '24px' }}>\r\n          {farm.depositFeeBP / 100}%\r\n        </Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={\r\n            farm.isTokenOnly\r\n              ? `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n              : `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n          }\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          quoteTokenAdresses={quoteTokenAdresses}\r\n          quoteTokenSymbol={quoteTokenSymbol}\r\n          tokenAddresses={tokenAddresses}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst FarmTabButtons = () => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={!isExact ? 1 : 0} size=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {TranslateString(999, 'Active')}\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n          {TranslateString(999, 'Inactive')}\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n","import React, { useEffect, useCallback } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { /* Image, */ Heading } from '@pancakeswap-libs/uikit'\r\nimport { BLOCKS_PER_YEAR, /* CAKE_PER_BLOCK, CAKE_POOL_PID */ } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nexport interface FarmsProps {\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { tokenMode } = farmsProps\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n        //   return farm\r\n        // }\r\n        const cakeRewardPerBlock = new BigNumber(farm.TCTMPerBlock || 1)\r\n          .times(new BigNumber(farm.poolWeight))\r\n          .div(new BigNumber(10).pow(18))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        let apy = cakePrice.times(cakeRewardPerYear)\r\n\r\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          totalValue = totalValue.times(bnbPrice)\r\n        }\r\n\r\n        if (totalValue.comparedTo(0) > 0) {\r\n          apy = apy.div(totalValue)\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [bnbPrice, account, cakePrice, ethereum],\r\n  )\r\n\r\n  const style = !tokenMode\r\n    ? { background: 'url()', backgroundSize: 'contain', height: 140, backgroundrepeat: 'no-repeat' }\r\n    : {}\r\n\r\n  return (\r\n    <Page>\r\n      <div style={style}>\r\n        <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n          {tokenMode\r\n            ? TranslateString(10004, 'Stake tokens to earn TCTM')\r\n            : TranslateString(10004, 'Stake LP tokens to earn TCTM')}\r\n          </Heading> \r\n        {/* <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n          {TranslateString(10000, 'Deposit Fee will be used to buyback TCTM')}\r\n          </Heading> */}\r\n        {tokenMode && (\r\n           <img\r\n            src=\"\"\r\n            alt=\"\"\r\n            width={200}\r\n            style={{ position: 'absolute', top: 50, right: 20 }}\r\n          /> \r\n        )}\r\n      </div>\r\n      <FarmTabButtons />\r\n      <div>\r\n        <Divider />\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsList(activeFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsList(inactiveFarms, true)}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n      {/* <div style={{ display: 'flex', alignItems: 'flex-end', justifyContent: 'flex-end' }}>\r\n        <Image src=\"\" alt=\"\" width={200} height={58} responsive />\r\n        </div> */}\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}